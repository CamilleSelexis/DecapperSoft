#include <SPI.h>
#include "TMC4361A_Register.h"
#include "Arduino.h"
#include "TMC4361A.h"
#include "RPC.h"

#define EN_PIN  D14
#define STALL_PIN D5

#define TGT1      D4
#define TGT2      D5
#define TGT3      D6
#define CS1       D11
#define CS2       D12
#define CS3       D13
#define MOSI_PIN  D8
#define MISO_PIN  D10
#define SCK_PIN   D9
#define CLK16_PIN D1

#define DRIVER_EN digitalWrite(EN_PIN,LOW)
#define DRIVER_DISABLE digitalWrite(EN_PIN,HIGH)

#define F_CPU       200000000
uint32_t ExtClk;

int state = 0; //State used by the finite state machine
//Declare the 3 Drivers
TMC4361A ControllerZ(CS1,TGT1);
TMC4361A ControllerM(CS2,TGT2);
TMC4361A ControllerC(CS3,TGT3);

void setup() {
  //Initialize pins
  pin_init();

  //Initialize the RPC
  init_RPC();
  //set up Timer1 is generated by the M7 core
  //Initialize the drivers
  ControllerZ.begin();
  ControllerM.begin();
  ControllerC.begin();
  
  DRIVER_EN; //Enable the drivers
  RPC.println("M4 setup done");

  goToStandby();
}

void loop() {
  static uint32_t last_time = 0;
  static uint32_t last_time2 = 0;
  uint32_t ms = millis();
  uint32_t data;

  if((ms-last_time)> 2000){
    last_time = ms;
    Serial.println("------------ Z --------------");
    Serial.print("Xactual = ");Serial.print(ControllerZ.readRegister(TMC4361A_XACTUAL));
    Serial.print(" Xtarget = ");Serial.println(ControllerZ.readRegister(TMC4361A_X_TARGET));
    Serial.print("Encoder angle = ");Serial.println(ControllerZ.getEncoderAngle());
    Serial.print("Encoder turn = ");Serial.println(ControllerZ.getEncoderTurn());
    Serial.println("----------------------");
    Serial.println("------------ X --------------");
    Serial.print("Xactual = ");Serial.print(ControllerM.readRegister(TMC4361A_XACTUAL));
    Serial.print(" Xtarget = ");Serial.println(ControllerM.readRegister(TMC4361A_X_TARGET));
    Serial.print("Encoder angle = ");Serial.println(ControllerM.getEncoderAngle());
    Serial.print("Encoder turn = ");Serial.println(ControllerM.getEncoderTurn());
    Serial.println("----------------------");

    if(ControllerZ.isTargetReached()){
      ControllerZ.setTargetRelative(200*256*20);//20 turns
    }
    if(ControllerM.isTargetReached()){
      ControllerM.setTargetRelative(200*256*5);
    }
  }
}
