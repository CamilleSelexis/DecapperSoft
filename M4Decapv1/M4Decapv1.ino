/*
 * M4Decapv1 by Camille Aussems
 * Selexis Geneva 26.08.2022
 * To run on an arduino portenta H7 with vision shield
 * Drive up to 3 driver/controller TMC4361A - TMC2660
 * Upload on M4 core
 * 
 */
#include <SPI.h>
#include "TMC4361A_Register.h"
#include "Arduino.h"
#include "TMC4361A.h"
#include "RPC.h"

#define EN_PIN  D14
#define STALL_PIN D5

#define TGT1      D4
#define TGT2      D5
#define TGT3      D6
#define CS1       D11
#define CS2       D12
#define CS3       D13
#define MOSI_PIN  D8
#define MISO_PIN  D10
#define SCK_PIN   D9
#define CLK16_PIN D1

#define DRIVER_EN digitalWrite(EN_PIN,LOW)
#define DRIVER_DISABLE digitalWrite(EN_PIN,HIGH)

#define TIMEOUT_MVMT 30000 //30 sec
#define TIMEOUT 10000 //10 sec

#define SCREW_TIME 6 //4 sec to screw/unscrew the cap

#define USTEPS  256 //number of usteps by full steps
#define STEP_TURN 200 //number of full steps in a single turn of the axis

#define ZGEAR   5
#define CGEAR   51
const float CTRANS =  1.25;
#define MGEAR   51
#define F_CPU       200000000
uint32_t ExtClk;

int Cpos = 0;
int *PCpos = &Cpos;
int state = 0; //State used by the finite state machine
int* Pstate = &state;

//Declare the 3 Drivers
TMC4361A ControllerZ(CS1,TGT1);
TMC4361A ControllerM(CS2,TGT2);
TMC4361A ControllerC(CS3,TGT3);

void setup() {
  //Initialize pins
  pin_init();

  //Initialize the RPC
  init_RPC();
  //set up Timer1 is generated by the M7 core
  //Initialize the drivers
  ControllerZ.begin();
  ControllerM.begin();
  ControllerC.begin();
  
  DRIVER_EN; //Enable the drivers
  RPC.println("M4 setup done");

  setPosition();
}

void loop() {
  //Wait for call from the M7 core to do something
  switch(state){
    case 0: //standby state
      delay(100);
      break;
    case 1: //Decap
      decap();
      if(!RPC.call("M4TaskCompleted").as<bool>())
        RPC.println("Error sending task completed");
      state = 0; //return to default state
      //send decap done to M7
      break;
    case 2: //Recap
      recap();
      if(!RPC.call("M4TaskCompleted").as<bool>())
        RPC.println("Error sending task completed");
      state = 0; //return to default state
      //send recap done to M7
      break;
    case 3: //Init_drivers
      break;
    case 4: //Write_parameters
      break;
    case 5: //read parameters
      break;
    case 11: //manual Z move
      break;
    case 12: //Manual M move
      break;
    case 13: //Manual C move
      break;
    default:
      RPC.println("Wrong state");
      break;
  }
}
